pseudocode forwardEngineering(xmiFile, output)
    json <= convertXMIToJSON(xmiFile)    
    For i = 1 To END ON json
        IF i['xmi:type'] = 'uml:Stereotype'
            objProfile <= { id: '', name: '' }
            objProfile.id <= i['xmi:id']
            objProfile.name <= i.name
    EndFor

    For i = 1 To END ON json
        IF i['xmi:type'] = 'uml:DataType'
            objDataType <= { id: '', name: '' }
            objDataType.id <= i['xmi:id']
            objDataType.name <= i.name
    EndFor
    
    routeContent <= createRouter(json, objProfile)
    modelContent <= createModel(json, objProfile, objDataType)
    controllerContent <= createController(json, objProfile, objDataType)
    createBackendService(routeContent, modelContent, controllerContent, output)


pseudocode createModel(json, objProfile, objDataType)
    getFilterDatabase <= objProfile.FILTER['Database']
    IF getFilterDatabase['Database'] = 'MySQL'
        tagModel = `
            /**
            * @modelName: ${CLASS_NAME}
            * @databaseType: ${MySQL}
            * @attribute: ${ARRAY_OF_ATTRIBUTE}
            */ 
        `;
        templateField += `${attributeName}: { type: DataTypes.${attributeType} },`;
        templateModel = `
            module.exports = (sequelize, DataTypes) => {
                const ${CLASS_NAME} = sequelize.define(
                    "${CLASS_NAME}",
                {
                    ${templateField}
                },{
                    timestamps: true
                }
                );
                return ${CLASS_NAME};
            };
        `;
    ELSE
        tagModel = `
            /**
            * @modelName: ${CLASS_NAME}
            * @databaseType: ${MongoDB}
            * @attribute: ${ARRAY_OF_ATTRIBUTE}
            */ 
        `;
        templateField += `${attributeName}: { type: ${attributeType} },`;
        templateModel = `
            const mongoose = require("mongoose");
            const ${CLASS_NAME + 'Schema'} = mongoose.Schema(
            {
                ${templateField}
            },
            {
                timestamps: true,
            }
            );
            const ${CLASS_NAME} =
            mongoose.model("${CLASS_NAME}", ${CLASS_NAME +'Schema'});
            module.exports = ${CLASS_NAME};
        `;
    ENDIF
    modelContent <= ''    
    CLASS_NAME <= []
    ARRAY_OF_ATTRIBUTE <= []
    getFilterModel <= objProfile.FILTER['Model']
    For i = 1 To END ON json
        IF i['xmi:type'] = getFilterModel['Model']
            objModel <= i
    EndFor
    For i = 1 To END ON objModel
        CLASS_NAME.push(i.name)
        ARRAY_OF_ATTRIBUTE.push(i.attribute)
        templateField += templateField.REPLACE('attributeName', i.attribute)
        templateField += templateField.REPLACE('attributeType', objDataType[i.attribute])
    EndFor
    templateModel.REPLACE['templateField']
    modelContent <= tagModel.REPLACE['ARRAY_OF_CLASS_NAME', 'ARRAY_OF_OPERATION_NAME'] + templateModel
    RETURN modelContent

pseudocode createRouter(json, objProfile)
    tagRoute = `
        /**
        * @routeClass: ${ARRAY_OF_CLASS_NAME}
        * @methodName: ${ARRAY_OF_METHOD_NAME}
        * @controllerName: ${ARRAY_OF_OPERATION_NAME}
        * @nextPath: ${DATA_NEXT_ROUTE_PATH}
        */
    `;

    templateRoute = `\nrouter.${methodName}("/${path}",${controllerName});`;

    routeContent <= ''    
    ARRAY_OF_CLASS_NAME <= []
    ARRAY_OF_METHOD_NAME <= []
    ARRAY_OF_OPERATION_NAME <= []
    DATA_NEXT_ROUTE_PATH <= []
    getFilterRoute <= objProfile.FILTER['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'Route']

    For i = 1 To END ON json
        IF i['xmi:type'] = getFilterRoute['Route']
            objRoute <= i
    EndFor

    inConsistency = NEW SET()

    For i = 1 To END ON objRoute
        keyForCheckInConsistency <= i.operation + i.dependency  + getFilterRoute[i.method]
        IF !inConsistency.has(keyForCheckInConsistency)  
            inConsistency.add(keyForCheckInConsistency)
            IF i.dependency != ''
                DATA_NEXT_ROUTE_PATH.push(i.dependency)
            ENDIF 
            ARRAY_OF_CLASS_NAME.push(i.controllerName)
            ARRAY_OF_METHOD_NAME.push(getFilterRoute[i.method])
            ARRAY_OF_OPERATION_NAME.push(i.operation)
            templateRoute += templateRoute.REPLACE('methodName', getFilterRoute[i.method])
            templateRoute += templateRoute.REPLACE('path', i.operation)
            templateRoute += templateRoute.REPLACE('controllerName', i.controllerName)
        ELSE NEXT            
        ENDIF
    EndFor

    routeContent <= tagRoute.REPLACE['ARRAY_OF_CLASS_NAME', 'ARRAY_OF_METHOD_NAME', 'ARRAY_OF_OPERATION_NAME', 'DATA_NEXT_ROUTE_PATH'] + templateRoute
    RETURN routeContent

pseudocode createController(json, objProfile, objDataType)
    tagController = `
        /**
        * @controllerClass: ${ARRAY_OF_CLASS_NAME}
        * @operationName: ${ARRAY_OF_OPERATION_NAME}
        */ 
    `;

    templateController = `const ${operationName} = asyncHandler(async (req, res) => { })\n`;

    controllerContent <= ''    
    ARRAY_OF_CLASS_NAME <= []
    ARRAY_OF_OPERATION_NAME <= []
    getFilterController <= objProfile.FILTER['Controller']

    For i = 1 To END ON json
        IF i['xmi:type'] = getFilterController['Controller']
            objController <= i
    EndFor

    For i = 1 To END ON objController
        ARRAY_OF_CLASS_NAME.push(i.controllerName)
        ARRAY_OF_OPERATION_NAME.push(i.operation)
        templateController += templateController.REPLACE('operationName', i.operation)
    EndFor

    controllerContent <= tagController.REPLACE['ARRAY_OF_CLASS_NAME', 'ARRAY_OF_OPERATION_NAME'] + templateController
    RETURN controllerContent