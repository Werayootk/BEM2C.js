pseudocode reverseEngineering(codePath, output)
    modelData <= []
    controllerData <= []
    routeData <= []
    targetFolder <= ['models', 'controllers', 'routes']
    subfolder <=  FS.READDIR(codePath, targetFolder)

    For i = 1 To END ON subfolder
        IF i.includes('.model.js')
            fileModelContent <= FS.READFILE(i.PATH, 'utf-8')
            modelPattern <= /@modelName\s*:\s*\[([^\]]+)\]/
            databasePattern <= /@databaseType\s*:\s*\[([^\]]+)\]/
            attributePattern <= /@attribute\s*:\s*\[([^\]]+)\]/
            modelMatches <= fileModelContent.match(modelPattern)
            databaseMatches <= fileModelContent.match(databasePattern)
            attributeMatches <= fileModelContent.match(attributePattern)
            modelData.push(modelMatches, databaseMatches, attributeMatches)
        ELSE IF i.includes('.controller.js')
            fileControllerContent <= FS.READFILE(i.PATH, 'utf-8')
            controllerClassPattern <= /@controllerClass\s*:\s*\[([^\]]+)\]/
            operationNamePattern <= /@operationName\s*:\s*\[([^\]]+)\]/
            controllerClassMatches <= fileControllerContent.match(controllerClassPattern)
            operationNameMatches <= fileControllerContent.match(operationNamePattern)
            controllerData.push(controllerClassMatches, operationNameMatches)
        ELSE IF i.includes('.route.js')
            fileRouteContent <= FS.READFILE(i.PATH, 'utf-8')
            routeClassPattern <= /@routeClass\s*:\s*\[([^\]]+)\]/
            methodNamePattern <= /@methodName\s*:\s*\[([^\]]+)\]/
            controllerNamePattern <= /@controllerName\s*:\s*\[([^\]]+)\]/
            nextPathPattern <= /@nextPath\s*:\s*(\[[\s\S]*?\])/
            routeClassMatches <= fileRouteContent.match(routeClassPattern)
            methodNameMatches <= fileRouteContent.match(methodNamePattern)
            controllerNameMatches <= fileRouteContent.match(controllerNamePattern)
            nextPathMatches <= fileRouteContent.match(nextPathPattern)
            routeData.push('routeClassMatches', 'methodNameMatches', 'controllerNameMatches', 'nextPathMatches')
        ENDIF
    EndFor

    generateXMI(modelData, controllerData, routeData, output)
    
pseudocode generateXMI(modelData, controllerData, routeData, output)
    xmiTemplate <= `
      <packagedElement xmi:id="${generateId()}" name="backend" xmi:type="uml:Model">
          <!-- <<PACKAGED_MODEL>> -->
          <!-- <<PACKAGED_CONTROLLER>> -->
          <!-- <<PACKAGED_DATABASE>> -->
          <!-- <<PACKAGED_ROUTE>> -->
      </packagedElement>
      `
    modelTemplate <= `
        <packagedElement xmi:id="${generateId()}" name="Model" xmi:type="uml:Package">
            <packagedElement xmi:id="${generateId()}" name="${className}" xmi:type="uml:Class">
                <!-- <<ATTRIBUTE_MODEL>> -->
            </packagedElement>
        </packagedElement>
    `
    databaseTemplate <= `
        <packagedElement xmi:id="${generateId()}" name="Database" xmi:type="uml:Package">
            <packagedElement xmi:id="${generateId()}" name="${modelData.databaseMatches}" xmi:type="uml:Class">
                <!-- <<ATTRIBUTE_DB>> -->
            </packagedElement>
        </packagedElement>
    `
    modelAttrTemplate <= `
        <ownedAttribute xmi:id="${generateId()}" name="${attributeName}" type="${attributeNameType}" xmi:type="uml:Property"/>
    `
    databaseAttrTemplate <= `
        <ownedAttribute xmi:id="${generateId()}" name="${modelData.databaseMatches}" xmi:type="uml:Property"/>
    `
    controllerTemplate <= `
        <packagedElement xmi:id="${generateId()}" name="Controller" xmi:type="uml:Package">
            <packagedElement xmi:id="${generateId()}" name="${className}" xmi:type="uml:Class">
                <!-- <<OPERATION_CONTROLLER>> -->
            </packagedElement>
        </packagedElement>
    `
    controllerOprTemplate <= `<ownedOperation xmi:id="${generateId()}" name="${operationName}" xmi:type="uml:Operation"/>`
    routeTemplate <= `
        <packagedElement xmi:id="${generateId()}" name="Route" xmi:type="uml:Package">
            <packagedElement xmi:id="${generateId()}" name="${className}" xmi:type="uml:Class">
                <!-- <<Member_ROUTE>> -->
                <!-- <<OPERATION_ROUTE>> -->
            </packagedElement>
        </packagedElement>
    `
    routeMemberTemplate <= `<ownedMember xmi:id="${generateId()}" 
            name="${param}" 
            xmi:type="uml:Dependency" 
            client="${from}" 
            supplier="${to}"/>
    `
    routeOprTemplate <= `<ownedOperation xmi:id="${generateId()}" name="${operationName}" xmi:type="uml:Operation"/>`
    
    For i = 1 To END ON modelData
        modelAttrTemplate.REPLACE(i.attributeName, 'attributeName')
        modelAttrTemplate.REPLACE(i.attributeNameType, 'attributeNameType')
    EndFor

    For i = 1 To END ON controllerData
        controllerOprTemplate.REPLACE(i.operationName, 'operationName')
    EndFor

    For i = 1 To END ON routeData
        routeMemberTemplate.REPLACE(i.param, 'param')
        routeMemberTemplate.REPLACE(i.from, 'from')
        routeMemberTemplate.REPLACE(i.to, 'to')
        routeOprTemplate.REPLACE(i.operationName, 'operationName')
    EndFor

    routeTemplate.REPLACE(routeMemberTemplate, '<!-- <<Member_ROUTE>> -->')
    controllerTemplate.REPLACE(routeOprTemplate, '<!-- <<OPERATION_ROUTE>> -->')
    modelTemplate.REPLACE(modelAttrTemplate, '<!-- <<ATTRIBUTE_MODEL>> -->')
    databaseTemplate.REPLACE(databaseAttrTemplate, '<!-- <<ATTRIBUTE_DB>> -->')

    xmiTemplate.REPLACE(routeTemplate, '<!-- <<PACKAGED_ROUTE>> -->')
    xmiTemplate.REPLACE(controllerTemplate, '<!-- <<PACKAGED_CONTROLLER>> -->')
    xmiTemplate.REPLACE(modelTemplate, '<!-- <<PACKAGED_MODEL>> -->')
    xmiTemplate.REPLACE(databaseTemplate, '<!-- <<PACKAGED_DATABASE>> -->')
    xmiContent <= xmiTemplate
    createXMI(xmiContent, output)


          
